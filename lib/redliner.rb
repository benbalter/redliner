require 'octokit'
require 'sinatra'
require 'sinatra_auth_github'
require 'dotenv'
require 'securerandom'
require 'redis'
require 'json'
require_relative "redliner/document"
require_relative "redliner/repository"

Dotenv.load
Octokit.auto_paginate = true

module Redliner
  class App < Sinatra::Base

    set :root, File.dirname(File.dirname(__FILE__))

    enable :sessions

    set :github_options, {
      :scopes    => "repo",
      :secret    => ENV['GITHUB_CLIENT_SECRET'],
      :client_id => ENV['GITHUB_CLIENT_ID'],
    }

    register Sinatra::Auth::Github

    use Rack::Session::Cookie, {
      :http_only => true,
      :secret => ENV['SESSION_SECRET'] || SecureRandom.hex
    }

    configure :production do
      require 'rack-ssl-enforcer'
      use Rack::SslEnforcer
    end

    def redis
      @redis ||= Redis.new \
        :host     => redis_url.host,
        :port     => redis_url.port,
        :password => redis_url.password
    end

    def redis_url
      @redis_url ||= URI.parse(ENV["REDISTOGO_URL"] || ENV["REDIS_URL"] || "redis://localhost:16379")
    end

    def user
      env['warden'].user unless env['warden'].nil?
    end

    def guest_token
      ENV['GITHUB_TOKEN']
    end

    def token
      if user
        user.token
      else
        guest_token
      end
    end

    def client
      @client ||= Octokit::Client.new :access_token => token
    end

    def render_template(template, locals)
      halt erb template, :layout => :layout, :locals => locals.merge({ :template => template })
    end

    def cache_content
      session[:content] = params[:content]
    end

    def cached_content
      session[:content]
    end

    def uncache_content
      session[:content] = nil
    end

    def user_name
      params[:type] == "guest" ? params[:name] : "@#{user.login}"
    end

    def pull_request_title
      "Redline submission from #{user_name}"
    end

    def pull_request_body
      body = "This pull request was generated by [Redliner](https://github.com/benbalter/redliner/).\n"
      body += "Submitted on behalf of #{user_name}"
      body += " from #{request.ip} using #{request.user_agent}" unless user
      body += "."
      body
    end

    def submit_redlines!
      document = Document.find_by_uuid(params[:uuid], self)

      # create a new branch
      client.create_ref document.repo.nwo, "heads/#{document.repo.patch_branch}", document.repo.base_sha

      # push our changes to the new branch
      client.update_contents document.repo.nwo, document.path, "TEST", document.sha, params[:content], { :branch => document.repo.patch_branch }

      # Submit the pull request
      pull_request = client.create_pull_request document.repo.nwo, document.ref, document.repo.patch_branch, pull_request_title, pull_request_body

      Raise "Could not create pull request" unless pull_request
      render_template :success, { :pull_request => pull_request }
    end

    get "/:owner/:repo/:view/:ref/*" do
      authenticate!

      doc = Document.new( {
        :path => params[:splat].first.to_s,
        :repo => params[:repo],
        :owner => params[:owner],
        :ref => params[:ref],
        :app => self
      })

      # only repo collaborators can generate new hashes
      halt 401 unless client.collaborator?(doc.repo.nwo, user.login)

      doc.save!
      redirect to("/document/#{doc.uuid}"), 301
    end

    get "/document/:uuid" do
      if user && cached_content #post oauth redirect back to GET route
        params[:content] = cached_content
        uncache_content
        submit_redlines!
      else # standard form
        document = Document.find_by_uuid(params[:uuid], self)
        render_template :form, { :document => document }
      end
    end

    # If the POST request is a GitHub-auth'd request
    # We must cache the changes to the user's session
    # After the Oauth handshake, they'll come back as a GET
    # If there is cached changes, we'll assume it's a post Oauth GET
    # Which should really be a POST, and submit the PR anyways
    post "/document/:uuid" do
      if params[:type] == "github"
        cache_content
        authenticate!
      elsif params[:type] == "guest"
        submit_redlines!
      end
    end
  end
end
